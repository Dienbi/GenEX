# Generated by Django 5.2.7 on 2025-10-27 01:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('exercises', '0006_userexercisestatus'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RichExerciseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='fas fa-puzzle-piece', max_length=50)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('supports_images', models.BooleanField(default=False)),
                ('supports_audio', models.BooleanField(default=False)),
                ('supports_video', models.BooleanField(default=False)),
                ('supports_drawing', models.BooleanField(default=False)),
                ('supports_drag_drop', models.BooleanField(default=False)),
                ('data_structure', models.JSONField(help_text='Structure de données spécifique au type')),
                ('validation_rules', models.JSONField(help_text='Règles de validation')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': "Type d'exercice enrichi",
                'verbose_name_plural': "Types d'exercices enrichis",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseFileImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'Word Document'), ('doc', 'Word Document (Legacy)'), ('txt', 'Text File'), ('md', 'Markdown'), ('image', 'Image')], max_length=10)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.PositiveIntegerField(help_text='Taille en bytes')),
                ('extracted_text', models.TextField(blank=True, help_text='Texte extrait du fichier')),
                ('extracted_images', models.JSONField(blank=True, default=list, help_text='Images extraites')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Métadonnées du fichier')),
                ('processing_status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='uploaded', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text="Message d'erreur si échec")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_imports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Import de fichier',
                'verbose_name_plural': 'Imports de fichiers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom du template', max_length=200)),
                ('description', models.TextField(help_text='Description du template')),
                ('template_structure', models.JSONField(help_text='Structure JSON du template')),
                ('sample_content', models.JSONField(help_text="Contenu d'exemple")),
                ('instructions', models.TextField(help_text='Instructions pour utiliser le template')),
                ('estimated_time', models.PositiveIntegerField(default=10, help_text='Temps estimé en minutes')),
                ('points', models.PositiveIntegerField(default=10, help_text='Points par défaut')),
                ('is_adaptive', models.BooleanField(default=False, help_text='Template adaptatif')),
                ('is_public', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text="Nombre d'utilisations")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='exercises.exercisecategory')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_templates', to=settings.AUTH_USER_MODEL)),
                ('difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='exercises.difficultylevel')),
                ('exercise_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='exercises.exercisetype')),
            ],
            options={
                'verbose_name': "Template d'exercice",
                'verbose_name_plural': "Templates d'exercices",
                'ordering': ['-usage_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RichExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rich_content', models.JSONField(help_text='Contenu enrichi (images, audio, etc.)')),
                ('interaction_data', models.JSONField(help_text="Données d'interaction (drag&drop, etc.)")),
                ('media_files', models.JSONField(blank=True, default=list, help_text='Fichiers média associés')),
                ('is_adaptive', models.BooleanField(default=False)),
                ('difficulty_parameters', models.JSONField(blank=True, default=dict, help_text='Paramètres de difficulté')),
                ('adaptation_rules', models.JSONField(blank=True, default=dict, help_text="Règles d'adaptation")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('base_exercise', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rich_exercise', to='exercises.exercise')),
                ('rich_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='exercises.richexercisetype')),
            ],
            options={
                'verbose_name': 'Exercice enrichi',
                'verbose_name_plural': 'Exercices enrichis',
            },
        ),
        migrations.CreateModel(
            name='ChapterExerciseGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_title', models.CharField(max_length=200)),
                ('chapter_content', models.TextField()),
                ('start_page', models.PositiveIntegerField(blank=True, null=True)),
                ('end_page', models.PositiveIntegerField(blank=True, null=True)),
                ('exercise_count', models.PositiveIntegerField(default=5)),
                ('generation_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('difficulty_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exercises.difficultylevel')),
                ('generated_exercises', models.ManyToManyField(blank=True, related_name='chapter_generations', to='exercises.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapter_generations', to=settings.AUTH_USER_MODEL)),
                ('source_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapter_generations', to='exercises.exercisefileimport')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='exercises.exercisetemplate')),
                ('exercise_types', models.ManyToManyField(blank=True, to='exercises.richexercisetype')),
            ],
            options={
                'verbose_name': 'Génération par chapitre',
                'verbose_name_plural': 'Générations par chapitre',
                'ordering': ['-created_at'],
            },
        ),
    ]
